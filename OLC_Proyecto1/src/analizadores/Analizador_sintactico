package analizadores;
import java_cup.runtime.*;
import java.util.ArrayList;

parser code
{:   
  public ArrayList<Expresion_regular> expresiones = new ArrayList<Expresion_regular>();
:}

terminal String tkRconj, tkDosPuntos, tkFlecha, tkComa, tkOnda, 
tkLlaveA, tkLlaveC, tkConcatenacion, tkDisyuncion, tkKleene,tkPositiva, 
tkBooleana, tkPorcentaje, tkPuntoComa, tkMinuscula, tkMayuscula, tkNumero, 
tkEspeciales, tkIdentificador, tkChar, tkString;

non terminal Programa;
non terminal declaraciones;
non terminal declaracion;
non terminal notacion_conjuntos;
non terminal contenedor_conj_comas;
non terminal conj_comas;
non terminal expresion_regular;
non terminal evaluaciones; 
non terminal evaluacion;

start with Programa;

Programa::=  tkLlaveA declaraciones  tkPorcentaje  tkPorcentaje  tkPorcentaje  tkPorcentaje evaluaciones  tkLlaveC;

declaraciones::= declaraciones declaracion|
            declaracion;

declaracion::=  tkRconj tkDosPuntos tkIdentificador tkFlecha notacion_conjuntos tkPuntoComa |
            tkIdentificador:a tkFlecha expresion_regular:b tkPuntoComa {: expresiones.add(new Expresion_regular(a, (Nodo)b)); :};

expresion_regular ::= tkConcatenacion:a expresion_regular:b expresion_regular:c {: 
                            Nodo nuevo = new Nodo(a);
                            nuevo.setIzq((Nodo)b);
                            nuevo.setDer((Nodo)c);
                            RESULT =  nuevo; :}|
                    tkDisyuncion:a expresion_regular:b expresion_regular:c {: 
                            Nodo nuevo = new Nodo(a);
                            nuevo.setIzq((Nodo)b);
                            nuevo.setDer((Nodo)c);
                            RESULT =  nuevo; :}|
                    tkKleene:a expresion_regular:b {: 
                            Nodo nuevo = new Nodo(a);
                            nuevo.setIzq((Nodo)b);
                            RESULT =  nuevo; :}|
                    tkPositiva:a expresion_regular:b {: 
                            Nodo nuevo = new Nodo(a);
                            nuevo.setIzq((Nodo)b);
                            RESULT =  nuevo; :}|
                    tkBooleana:a expresion_regular:b {: 
                            Nodo nuevo = new Nodo(a);
                            nuevo.setIzq((Nodo)b);
                            RESULT =  nuevo; :}|
                    tkLlaveA tkIdentificador:a  tkLlaveC {: Nodo nuevo = new Nodo(a);
                              nuevo.setHoja(true);
                              RESULT =  nuevo; :}|
                    tkChar:a {: Nodo nuevo = new Nodo(a);
                              nuevo.setHoja(true);
                              RESULT =  nuevo; :};


notacion_conjuntos::= tkMinuscula tkOnda tkMinuscula|
                    tkMayuscula tkOnda tkMayuscula|
                    tkNumero tkOnda tkNumero|
                    tkEspeciales tkOnda tkEspeciales|
                    contenedor_conj_comas ;

contenedor_conj_comas::= contenedor_conj_comas:a tkComa conj_comas:b  |
                  conj_comas:a;

conj_comas::= tkMinuscula|
                 tkMayuscula|
                 tkNumero|
                 tkEspeciales;

evaluaciones ::= evaluaciones evaluacion|
            evaluacion;

evaluacion ::= tkIdentificador tkDosPuntos tkString tkPuntoComa|
           tkIdentificador tkDosPuntos tkChar tkPuntoComa;
