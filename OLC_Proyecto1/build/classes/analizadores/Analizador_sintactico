package analizadores;
import java_cup.runtime.*;
import java.util.ArrayList;

parser code
{:   
    public ArrayList<Expresion_regular> expresiones = new ArrayList<Expresion_regular>();
    public ArrayList<Conjunto> conjuntos = new ArrayList<Conjunto>();
    public ArrayList<Evaluacion> pruebas = new ArrayList<Evaluacion>();
    public String errores_s = "";

    public void syntax_error(Symbol s){
        System.out.println("Error sintactico: "+s.value+", Linea "+(s.left+1)+" Columna "+(s.right+1));
        errores_s += "<tr><td>Sintáctico</td><td> Error sintactico encontrado: \""+s.value+"\"</td><td>"+(s.left+1)+"</td><td>"+(s.right+1)+"</td></tr>\n";
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("Error sintactico NR: "+s.value+", Linea "+(s.left+1)+" Columna "+(s.right+1));
        errores_s += "<tr><td>Sintáctico</td><td> Error sintactico No recuperable encontrado: \""+s.value+"\"</td><td>"+(s.left+1)+"</td><td>"+(s.right+1)+"</td></tr>\n";
        
    }   
:}

terminal String tkRconj, tkDosPuntos, tkFlecha, tkComa, tkOnda, 
tkLlaveA, tkLlaveC, tkConcatenacion, tkDisyuncion, tkKleene,tkPositiva, 
tkBooleana, tkPorcentaje, tkPuntoComa, tkMinuscula, tkMayuscula, tkNumero, 
tkEspeciales, tkIdentificador, tkChar, tkString;

non terminal Programa;
non terminal declaraciones;
non terminal declaracion;
non terminal notacion_conjuntos;
non terminal contenedor_conj_comas;
non terminal conj_comas;
non terminal expresion_regular;
non terminal evaluaciones; 
non terminal evaluacion;

start with Programa;

Programa::=  tkLlaveA declaraciones  tkPorcentaje  tkPorcentaje  tkPorcentaje  tkPorcentaje evaluaciones  tkLlaveC;

declaraciones::= declaraciones declaracion|
            declaracion;

declaracion::=  tkRconj tkDosPuntos tkIdentificador:a tkFlecha notacion_conjuntos:b tkPuntoComa {: conjuntos.add(new Conjunto(a,(ArrayList) b)); :}|
            tkIdentificador:a tkFlecha expresion_regular:b tkPuntoComa {: expresiones.add(new Expresion_regular(a, (Nodo)b)); :};

expresion_regular ::= tkConcatenacion:a expresion_regular:b expresion_regular:c {: 
                            Nodo nuevo = new Nodo(a);
                            nuevo.setIzq((Nodo)b);
                            nuevo.setDer((Nodo)c);
                            RESULT =  nuevo; :}|
                    tkDisyuncion:a expresion_regular:b expresion_regular:c {: 
                            Nodo nuevo = new Nodo(a);
                            nuevo.setIzq((Nodo)b);
                            nuevo.setDer((Nodo)c);
                            RESULT =  nuevo; :}|
                    tkKleene:a expresion_regular:b {: 
                            Nodo nuevo = new Nodo(a);
                            nuevo.setIzq((Nodo)b);
                            RESULT =  nuevo; :}|
                    tkPositiva:a expresion_regular:b {: 
                            Nodo nuevo = new Nodo(a);
                            nuevo.setIzq((Nodo)b);
                            RESULT =  nuevo; :}|
                    tkBooleana:a expresion_regular:b {: 
                            Nodo nuevo = new Nodo(a);
                            nuevo.setIzq((Nodo)b);
                            RESULT =  nuevo; :}|
                    tkLlaveA tkIdentificador:a  tkLlaveC {: Nodo nuevo = new Nodo(a);
                              nuevo.setHoja(true);
                              RESULT =  nuevo; :}|
                    tkChar:a {: Nodo nuevo = new Nodo(a);
                              nuevo.setHoja(true);
                              RESULT =  nuevo; :};


notacion_conjuntos::= tkMinuscula:a tkOnda tkMinuscula:b {:
            ArrayList<Integer> nuevo_conjunto = new ArrayList<Integer>();
            for(int i = (int) a.charAt(0);i<=(int) b.charAt(0);i++){
                nuevo_conjunto.add(i);
            }RESULT = nuevo_conjunto;
            :}|
                    tkMayuscula:a tkOnda tkMayuscula:b {:
            ArrayList<Integer> nuevo_conjunto = new ArrayList<Integer>();
            for(int i = (int) a.charAt(0);i<=(int) b.charAt(0);i++){
                nuevo_conjunto.add(i);
            }RESULT = nuevo_conjunto;
            :}|
                    tkNumero:a tkOnda tkNumero:b {:
            ArrayList<Integer> nuevo_conjunto = new ArrayList<Integer>();
            for(int i = (int) a.charAt(0);i<=(int) b.charAt(0);i++){
                nuevo_conjunto.add(i);
            }RESULT = nuevo_conjunto;
            :}|
                    tkEspeciales:a tkOnda tkEspeciales:b {:
            ArrayList<Integer> nuevo_conjunto = new ArrayList<Integer>();
            for(int i = (int) a.charAt(0);i<=(int) b.charAt(0);i++){
                if( (i>47 && i<58) || (i>64 && i<91) || (i>496 && i<123)){
                    continue;
                }else{
                    nuevo_conjunto.add(i);
                }
            }RESULT = nuevo_conjunto;
            :}|
                    contenedor_conj_comas:a {:
                String notacion = (String) a;
                ArrayList<Integer> nuevo_conjunto = new ArrayList<>();
                for(int i = 0;i < notacion.length();i++)
                {
                   nuevo_conjunto.add((int) notacion.charAt(i));
                }
                RESULT = nuevo_conjunto;
                :};

contenedor_conj_comas::= contenedor_conj_comas:a tkComa conj_comas:b  {:RESULT = (String)a+(String)b;:} |
                  conj_comas:a {:RESULT = a;:};

conj_comas::= tkMinuscula:a {:RESULT = a;:}|
                 tkMayuscula:a {:RESULT = a;:}|
                 tkNumero:a {:RESULT = a;:}|
                 tkEspeciales:a {:RESULT = a;:};

evaluaciones ::= evaluaciones evaluacion|
            evaluacion;

evaluacion ::= tkIdentificador:a tkDosPuntos tkString:b tkPuntoComa {: pruebas.add(new Evaluacion(a,b));:}|
           tkIdentificador:a tkDosPuntos tkChar:b tkPuntoComa {: pruebas.add(new Evaluacion(a,b));:};
